/*
* ============================================================================
*  Name     : CAuebTrilizaAppUi from AuebTrilizaAppUi.cpp
*  Part of  : AuebTriliza
*  Created  : 11/12/2004 by Makidis Mixalis & Karakatsiotis Giorgos
*  Implementation notes:
*     Initial content was generated by Series 60 AppWizard.
*  Copyright: Makidis Mixalis & Karakatsiotis Giorgos 2004-2005
* ============================================================================
*/

// INCLUDE FILES
#include "AuebTrilizaAppUi.h"
#include <AuebTriliza.rsg>  // for resources
#include "auebtriliza.hrh"  // for commands
#include "AuebTrilizaView.h"
#include "AuebTrilizaView2.h"
#include <AuebTriliza.mbg> // for the icons
#include "AuebTrilizaContainer2.h"

#include <avkon.hrh>

#include <stringloader.h>  // for StringLoader
#include <aknmessagequerydialog.h> // for query dialog
#include <AknLists.h>     // for the listbox
#include <akniconarray.h>   // for the icon array

#include <AknWaitDialog.h>		//wait Dialog
#include <aknglobalnote.h>    // global note
#include <aknnotewrappers.h> // for notes

const TInt KServerCleanupDelayMicroSeconds = 4000000;
const TInt KFormattedMessagePrefixLength = 10;
_LIT(KFormattedMessagePrefix, "Message:\n");

// ================= MEMBER FUNCTIONS =======================

CAuebTrilizaAppUi::CAuebTrilizaAppUi(CAuebTrilizaDocument* aDocument)
: iNaviDecorator(NULL), iDocument(aDocument)
{}

//
// ----------------------------------------------------------
// CAuebTrilizaAppUi::ConstructL()
// ?implementation_description
// ----------------------------------------------------------
//
void CAuebTrilizaAppUi::ConstructL()
    {
    BaseConstructL(
#ifdef SERIES_60_V2
		EAknEnableSkin
#endif
		);

    // Show tabs for main views from resources
    CEikStatusPane* sp = StatusPane();

    // Fetch pointer to the default navi pane control
    iNaviPane = (CAknNavigationControlContainer*)sp->ControlL(
        TUid::Uid(EEikStatusPaneUidNavi));

    ShowDefaultNaviPaneL();

    iView1 = new (ELeave) CAuebTrilizaView(this, iDocument);

    CleanupStack::PushL( iView1 );
    iView1->ConstructL();
    AddViewL( iView1 );      // transfer ownership to CAknViewAppUi
    CleanupStack::Pop();    // view1

    iView2 = new (ELeave) CAuebTrilizaView2(this, iDocument);

    CleanupStack::PushL( iView2 );
    iView2->ConstructL();
    AddViewL( iView2 );      // transfer ownership to CAknViewAppUi
    CleanupStack::Pop();    // view2

    SetDefaultViewL(*iView1);

    iServer = CBluetoothServer::NewL(*this);
    iClient = CBluetoothClient::NewL(*this);

    }

// ----------------------------------------------------
// CAuebTrilizaAppUi::~CAuebTrilizaAppUi()
// Destructor
// Frees reserved resources
// ----------------------------------------------------
//
CAuebTrilizaAppUi::~CAuebTrilizaAppUi()
    {
	delete iServer;
	delete iClient;

    delete iNaviDecorator;
   }

// ------------------------------------------------------------------------------
// CAuebTrilizaAppUi::::DynInitMenuPaneL(TInt aResourceId,CEikMenuPane* aMenuPane)
//  This function is called by the EIKON framework just before it displays
//  a menu pane. Its default implementation is empty, and by overriding it,
//  the application can set the state of menu items dynamically according
//  to the state of application data.
// ------------------------------------------------------------------------------
//
void CAuebTrilizaAppUi::DynInitMenuPaneL(
    TInt /*aResourceId*/,CEikMenuPane* /*aMenuPane*/)
    {
    }

// ----------------------------------------------------
// CAuebTrilizaAppUi::HandleKeyEventL(
//     const TKeyEvent& aKeyEvent,TEventCode /*aType*/)
// ?implementation_description
// ----------------------------------------------------
//
TKeyResponse CAuebTrilizaAppUi::HandleKeyEventL(
    const TKeyEvent& /*aKeyEvent*/,TEventCode /*aType*/)
    {
    return EKeyWasNotConsumed;
    }

// ----------------------------------------------------
// CAuebTrilizaAppUi::HandleCommandL(TInt aCommand)
// ?implementation_description
// ----------------------------------------------------
//
void CAuebTrilizaAppUi::HandleCommandL(TInt aCommand)
    {
    switch ( aCommand )
        {
        case EAknSoftkeyExit:
        case EExit:
            {
            Exit();
            break;
            }
        case EHelpAbout:
			{
			// load the resources and display the about box
			HBufC* textResource = StringLoader::LoadLC(R_AUEBTRILIZA_HELP);
			HBufC* textResource2 = StringLoader::LoadLC(R_AUEBTRILIZA_HELP_ABOUT);

			CAknMessageQueryDialog* dlg = CAknMessageQueryDialog::NewL(*textResource);

			dlg->PrepareLC(R_MESSAGE_QUERY);
			dlg->QueryHeading()->SetTextL(*textResource2);
			dlg->RunLD();

			CleanupStack::PopAndDestroy(textResource2);
			CleanupStack::PopAndDestroy(textResource);
            break;
			}
		case ENewGame1PEasy:
			{
				iDocument->SetDifficulty(CAuebTrilizaDocument::EEasy);
				New1PGame();
				break;
			}
		
		case ENewGame1PHard:
			{
				iDocument->SetDifficulty(CAuebTrilizaDocument::EHard);
				New1PGame();
				break;
			}
		case ENewGame2P:
			{
				// Disconnect
				if (iDocument->IsServer())
					iServer->StopL();
				else
					iClient->Disconnect();

				// Ask for options
				TInt Game2pOptions = GetNew2pGameOptions();
				if(Game2pOptions < 0) break;

				if(Game2pOptions == 0) //server
				{
					StartReceivingL();
					iDocument->IsServer(true);
				}
				else
				{
                    iDocument->IsServer(false);
					FindRemoteDeviceL();
				}

				break;
			}
		case EShowWelcomeScreen:
			{
			if (iDocument->IsServer())
				iServer->StopL();
			else
				iClient->Disconnect();

			// switch to 1nd view
			ActivateLocalViewL(KViewId);

			break;
			}
        default:
            break;
        }
    }

void CAuebTrilizaAppUi::New1PGame()
{
	// Disconnect
	if (iDocument->IsServer())
		iServer->StopL();
	else
		iClient->Disconnect();

	// Get the options from the player
	TInt PieceGameOptions = GetNewPieceGameOptions();
	if(PieceGameOptions < 0) return;

	CAuebTrilizaDocument::TPiece PlayersColor = (PieceGameOptions == 0) ? CAuebTrilizaDocument::EX : CAuebTrilizaDocument::EO;
	CAknQueryDialog* confirmDialog = CAknQueryDialog::NewL(CAknQueryDialog::ENoTone);

	if (confirmDialog->ExecuteLD(R_START_FIRST_DIALOG))
	{
		iDocument->NewGame(CAuebTrilizaDocument::ECurrentPlayer, PlayersColor, EFalse);
	}
	else
	{
		iDocument->NewGame(CAuebTrilizaDocument::EOpponent, PlayersColor, EFalse);
	}

	// switch to 2nd view
	ActivateLocalViewL(KView2Id);
}

/*
** Ask the player whether he wants to be the server or the client.
** Returns 0 for server, 1 for client or -1 in case the user cancels
** the dialog
*/
TInt CAuebTrilizaAppUi::GetNew2pGameOptions()
{
	TInt result = -1;
	CAknDoubleLargeGraphicPopupMenuStyleListBox* list =
                     new(ELeave) CAknDoubleLargeGraphicPopupMenuStyleListBox;

    CleanupStack::PushL(list);
    CAknPopupList* popupList = CAknPopupList::NewL(
                                        list, R_AVKON_SOFTKEYS_OK_CANCEL,
                                        AknPopupLayouts::EMenuDoubleLargeGraphicWindow);

    CleanupStack::PushL(popupList);

    TInt flags = 0; // Initialize flag
    list->ConstructL(popupList, flags);
    list->CreateScrollBarFrameL(ETrue);
    list->ScrollBarFrame()->SetScrollBarVisibilityL(
                                CEikScrollBarFrame::EOff,
                                CEikScrollBarFrame::EAuto);

    // Set Item text
    CDesCArrayFlat* items =
            iCoeEnv->ReadDesCArrayResourceL(R_SERVER_CLIENT_OPTIONS);
    CleanupStack::PushL(items);

    // Set listitems.
    CTextListBoxModel* model = list->Model();
    model->SetItemTextArray(items);
    model->SetOwnershipType(ELbmOwnsItemArray);
    CleanupStack::Pop();

    // Create Icon object
    CArrayPtr<CGulIcon>* icons =
                            new(ELeave) CAknIconArray(2);
    CleanupStack::PushL(icons); // PUSH Icon

    // Load bitmap file name
    icons->AppendL( iEikonEnv->CreateIconL( _L("\\system\\apps\\AuebTriliza\\AuebTriliza.mbm"),
                                            EMbmAuebtrilizaServer,
                                            EMbmAuebtrilizaServerm ) );
	icons->AppendL( iEikonEnv->CreateIconL( _L("\\system\\apps\\AuebTriliza\\AuebTriliza.mbm"),
                                            EMbmAuebtrilizaClient,
                                            EMbmAuebtrilizaClientm ) );

    list->ItemDrawer()->FormattedCellData()->SetIconArrayL(icons);

    CleanupStack::Pop();    // POP Icon

    list->ClearSelection();

    // Set title
    TBuf<40> title;
    iCoeEnv->ReadResource(title, R_SERVER_CLIENT_OPTIONS_TITLE);
    popupList->SetTitleL(title);


    // Show popup list and then show return value.
    TInt popupOk = popupList->ExecuteLD();
    CleanupStack::Pop();            // popuplist
    if (popupOk)
        {
        result = list->CurrentItemIndex();
		TBuf<1> buf;
		buf.AppendNum(result);
        iEikonEnv->InfoMsg( buf );
        }

    CleanupStack::PopAndDestroy();  // list

	return result;
}

/*
** Ask the player whether he waths the O or X symbol.
** Returns 0 for X, 1 for O or -1 in case the user cancels
** the dialog
*/
TInt CAuebTrilizaAppUi::GetNewPieceGameOptions()
{
	TInt result = -1;
	CAknDoubleLargeGraphicPopupMenuStyleListBox* list =
                     new(ELeave) CAknDoubleLargeGraphicPopupMenuStyleListBox;

    CleanupStack::PushL(list);
    CAknPopupList* popupList = CAknPopupList::NewL(
                                        list, R_AVKON_SOFTKEYS_OK_CANCEL,
                                        AknPopupLayouts::EMenuDoubleLargeGraphicWindow);

    CleanupStack::PushL(popupList);

    TInt flags = 0; // Initialize flag
    list->ConstructL(popupList, flags);
    list->CreateScrollBarFrameL(ETrue);
    list->ScrollBarFrame()->SetScrollBarVisibilityL(
                                CEikScrollBarFrame::EOff,
                                CEikScrollBarFrame::EAuto);

    // Set Item text
    CDesCArrayFlat* items =
            iCoeEnv->ReadDesCArrayResourceL(R_PIECE_OPTIONS);
    CleanupStack::PushL(items);

    // Set listitems.
    CTextListBoxModel* model = list->Model();
    model->SetItemTextArray(items);
    model->SetOwnershipType(ELbmOwnsItemArray);
    CleanupStack::Pop();

    // Create Icon object
    CArrayPtr<CGulIcon>* icons =
                            new(ELeave) CAknIconArray(2);
    CleanupStack::PushL(icons); // PUSH Icon

    // Load bitmap file name
    icons->AppendL( iEikonEnv->CreateIconL( _L("\\system\\apps\\AuebTriliza\\AuebTriliza.mbm"),
                                            EMbmAuebtrilizaSymbolx,
                                            EMbmAuebtrilizaSymbolxm ) );
	icons->AppendL( iEikonEnv->CreateIconL( _L("\\system\\apps\\AuebTriliza\\AuebTriliza.mbm"),
                                            EMbmAuebtrilizaSymbolo,
                                            EMbmAuebtrilizaSymbolom ) );

    list->ItemDrawer()->FormattedCellData()->SetIconArrayL(icons);

    CleanupStack::Pop();    // POP Icon

    list->ClearSelection();

    // Set title
    TBuf<40> title;
    iCoeEnv->ReadResource(title, R_PIECE_OPTIONS_TITLE);
    popupList->SetTitleL(title);


    // Show popup list and then show return value.
    TInt popupOk = popupList->ExecuteLD();
    CleanupStack::Pop();            // popuplist
    if (popupOk)
        {
        result = list->CurrentItemIndex();
		TBuf<1> buf;
		buf.AppendNum(result);
        iEikonEnv->InfoMsg( buf );
        }

    CleanupStack::PopAndDestroy();  // list

	return result;
}

// Clears the Navi Panel (display the decorative graphic)
void CAuebTrilizaAppUi::ShowDefaultNaviPaneL()
{
	CEikStatusPane* sp=iEikonEnv->AppUiFactory()->StatusPane();
	CAknNavigationControlContainer* np= (CAknNavigationControlContainer *)sp->ControlL(TUid::Uid(EEikStatusPaneUidNavi));
	np->PushDefaultL (); // Set default.
	delete iNaviDecorator;
	iNaviDecorator = NULL;
}

// Displays the text accepted as parameter at the Navi Panel
void CAuebTrilizaAppUi::ShowAtNaviPanelL(TPtrC aText)
{
	CEikStatusPane* sp=iEikonEnv->AppUiFactory()->StatusPane();
	CAknNavigationControlContainer* np= (CAknNavigationControlContainer *)sp->ControlL(TUid::Uid(EEikStatusPaneUidNavi));

	delete iNaviDecorator;
	iNaviDecorator = NULL;

	iNaviDecorator = np->CreateNavigationLabelL(aText);

	np->PushL(*iNaviDecorator);
}

/**
* Begin Client side communication.
*
* Find a Device
* Find Service on device and obtain Port information
* Pass to the Client to form a connection
*/
void CAuebTrilizaAppUi::FindRemoteDeviceL()
	{
	iDeviceSearcher = CBluetoothDeviceSearcher::NewL(*this);
	iDeviceSelectionResponse = new (ELeave) TBTDeviceResponseParamsPckg();
	iDeviceSearcher->SelectDeviceL(*iDeviceSelectionResponse);
	}

void CAuebTrilizaAppUi::DeviceFoundL(TInt result)
	{
	delete iDeviceSearcher;	// delete and cleanup
	iDeviceSearcher = NULL;

	if (result == KErrNone)
		{
		TInt port = 0;
		CBluetoothServiceSearcher* serviceSearcher = CBluetoothServiceSearcher::NewLC(port);
		TInt serviceFound = serviceSearcher->FindServiceL((*iDeviceSelectionResponse)().BDAddr());
		CleanupStack::PopAndDestroy( serviceSearcher );

		if (serviceFound == KErrNone)
			{
			iClient->ConnectToServerL((*iDeviceSelectionResponse)().BDAddr(), port);

			iWaitDialog = new (ELeave) CAknWaitDialog(NULL, ETrue);
			HBufC* waitingMessage = StringLoader::LoadLC(R_SERVER_WAITING_MESSAGE);
			iWaitDialog->SetTextL(*waitingMessage);
			CleanupStack::PopAndDestroy(waitingMessage);
			TInt retVal = iWaitDialog->ExecuteLD(R_BLUETOOTH_CONNECTION_WAIT_DIALOG);
			iWaitDialog = NULL;

			if (retVal != EAknSoftkeyDone)
				{
				// switch to 1st view
				ActivateLocalViewL(KViewId);

				iClient->Disconnect();
				}
			}
		else
			{
			CAknGlobalNote* globalNote = CAknGlobalNote::NewLC();
			HBufC* warning = StringLoader::LoadLC(R_SERVICE_NOT_FOUND);
			globalNote->ShowNoteL(EAknGlobalWarningNote, *warning);
			CleanupStack::PopAndDestroy(globalNote);
			CleanupStack::PopAndDestroy(warning);

			// Permit clean up of Bluetooth server connection
			User::After(TTimeIntervalMicroSeconds32(KServerCleanupDelayMicroSeconds));

			// Disconnect
			if (iDocument->IsServer())
				iServer->StopL();
			else
				iClient->Disconnect();
			}
		}

	delete iDeviceSelectionResponse;
	iDeviceSelectionResponse = NULL;
	}


/**
* Provide UI feedback of errors occured during communication
* @param aErrorCode code repesenting the error that occured
*/
void CAuebTrilizaAppUi::HandleErrorL(TInt aErrorCode)
	{
	if (iWaitDialog)
		{
		iWaitDialog->ProcessFinishedL();
		iWaitDialog = NULL;
		}

	HBufC* message;

	switch (aErrorCode)
		{
		case (KErrDisconnected):
		case (KErrAbort):
			{
			message = StringLoader::LoadLC(R_DISCONNECTED);
			CAknInformationNote* errorDialog = new (ELeave) CAknInformationNote();
			errorDialog->ExecuteLD(*message);
			CleanupStack::PopAndDestroy(message);
			HandleCommandL(EShowWelcomeScreen);
			break;
			}

		case (KErrNotReady):
			{
			message = StringLoader::LoadLC(R_CONNECTION_LOST);
			CAknWarningNote* errorDialog = new (ELeave) CAknWarningNote();
			errorDialog->ExecuteLD(*message);
			CleanupStack::PopAndDestroy(message);
			HandleCommandL(EShowWelcomeScreen);
			break;
			}

		case (KErrCancel):
			{
				break;
			}
		case (KErrCouldNotConnect):
			{
			message = StringLoader::LoadLC(R_COULD_NOT_CONNECT);
			CAknWarningNote* errorDialog = new (ELeave) CAknWarningNote();
			errorDialog->ExecuteLD(*message);
			CleanupStack::PopAndDestroy(message);
			HandleCommandL(EShowWelcomeScreen);
			break;
			}

		default:
			{
			message = StringLoader::LoadLC(R_UNKNOWN_ERROR);
			CAknWarningNote* errorDialog = new (ELeave) CAknWarningNote();
			TBuf<50> txt;
			txt.Append(*message);
			txt.Append(_L(" ("));
			txt.AppendNum(aErrorCode);
			txt.Append(_L(")"));
			errorDialog->ExecuteLD(txt);
			CleanupStack::PopAndDestroy(message);
			HandleCommandL(EShowWelcomeScreen);
			break;
			}
		}

	// switch to 1st view
	ActivateLocalViewL(KViewId);

	}


/**
* Connection Made.
*
* Server - Remove the Cancel dialog
* Client - Provide feedback that a connection has been made
*/
void CAuebTrilizaAppUi::ConnectedL()
	{
	if (iWaitDialog && iDocument->IsServer())
		{
		iWaitDialog->ProcessFinishedL();
		iWaitDialog = NULL;
		}
	}

/**
* Process the message received from remote device.
*/
void CAuebTrilizaAppUi::DataReceivedL(const TDesC& aMessage)
	{
		if (aMessage == _L("0"))
		  iView2->GetContainer()->PerformMove(0);
		else  if (aMessage == _L("1"))
		  iView2->GetContainer()->PerformMove(1);
		else  if (aMessage == _L("2"))
		  iView2->GetContainer()->PerformMove(2);
		else  if (aMessage == _L("3"))
		  iView2->GetContainer()->PerformMove(3);
		else  if (aMessage == _L("4"))
		  iView2->GetContainer()->PerformMove(4);
		else  if (aMessage == _L("5"))
		  iView2->GetContainer()->PerformMove(5);
		else  if (aMessage == _L("6"))
		  iView2->GetContainer()->PerformMove(6);
		else  if (aMessage == _L("7"))
		  iView2->GetContainer()->PerformMove(7);
		else  if (aMessage == _L("8"))
		  iView2->GetContainer()->PerformMove(8);

		else if (aMessage == _L("A"))
		{
			if(iWaitDialog) iWaitDialog->ProcessFinishedL();
			iWaitDialog = NULL;

			iDocument->NewGame(CAuebTrilizaDocument::EOpponent, CAuebTrilizaDocument::EO);
			iClient->Send(_L("I"));

			// switch to 2nd view
			ActivateLocalViewL(KView2Id);
		}
		else if (aMessage == _L("B"))
		{
			if(iWaitDialog) iWaitDialog->ProcessFinishedL();
			iWaitDialog = NULL;

			iDocument->NewGame(CAuebTrilizaDocument::EOpponent, CAuebTrilizaDocument::EX);
			iClient->Send(_L("I"));

			// switch to 2nd view
			ActivateLocalViewL(KView2Id);
		}
		else if (aMessage == _L("C"))
		{
			if(iWaitDialog) iWaitDialog->ProcessFinishedL();
			iWaitDialog = NULL;

			iDocument->NewGame(CAuebTrilizaDocument::ECurrentPlayer, CAuebTrilizaDocument::EO);

			// switch to 2nd view
			ActivateLocalViewL(KView2Id);
		}
		else if (aMessage == _L("D"))
		{
			if(iWaitDialog) iWaitDialog->ProcessFinishedL();
			iWaitDialog = NULL;

			iDocument->NewGame(CAuebTrilizaDocument::ECurrentPlayer, CAuebTrilizaDocument::EX);

			// switch to 2nd view
			ActivateLocalViewL(KView2Id);
		}
		else if (aMessage == _L("X"))  // Abort
		{
			if(iWaitDialog) iWaitDialog->ProcessFinishedL();
			iWaitDialog = NULL;

			// switch to 1st view
			ActivateLocalViewL(KViewId);

			iClient->Disconnect();

			CAknInformationNote* infoDialog = new (ELeave) CAknInformationNote();
			HBufC* message = StringLoader::LoadLC(R_SERVER_TERMINATED_CONNECTION);
			infoDialog->ExecuteLD(*message);
			CleanupStack::PopAndDestroy(message);
		}
	}

/**
* React to completion of server startup.
*
* Starts advertising on server
* Display a dialog box with the option to cancel this listening process
*/
void CAuebTrilizaAppUi::ServerStartedL()
	{

	// start the server's advertiser.
	iServer->StartAdvertisingL();

	// display a dialog to allow a user to cancel listening if required.
	delete iWaitDialog;
	iWaitDialog = NULL;
	iWaitDialog = new (ELeave) CAknWaitDialog(NULL, ETrue);
	HBufC* waitingMessage = StringLoader::LoadLC(R_WAITING_MESSAGE);
	iWaitDialog->SetTextL(*waitingMessage);
	CleanupStack::PopAndDestroy(waitingMessage);
	TInt retVal = iWaitDialog->ExecuteLD(R_BLUETOOTH_CONNECTION_WAIT_DIALOG);
	iWaitDialog = NULL;

	if (retVal != EAknSoftkeyDone)
		{
		// User has cancelled this connection process
		iServer->StopL();
		}
	else
	{
		if(!iServer->IsConnected()) return;

		// Ask the user for piece
		TInt PieceGameOptions = GetNewPieceGameOptions();
		if(PieceGameOptions < 0) // Abort
		{
			iServer->Send(_L("X"));
			return;
		}

		if(!iServer->IsConnected()) return;

		CAuebTrilizaDocument::TPiece PlayersColor = (PieceGameOptions == 0) ? CAuebTrilizaDocument::EX : CAuebTrilizaDocument::EO;
		CAknQueryDialog* confirmDialog = CAknQueryDialog::NewL(CAknQueryDialog::ENoTone);

		if(!iServer->IsConnected()) return;

		TBuf<1> params;
		if (confirmDialog->ExecuteLD(R_START_FIRST_DIALOG))
		{
            if (PlayersColor == CAuebTrilizaDocument::EX)
            {
              //paizw prwtos && X
              params = _L("A");
            }
            else
            {
              //paizw prwtos && O
              params = _L("B");
            }

			iDocument->NewGame(CAuebTrilizaDocument::ECurrentPlayer, PlayersColor);
		}
		else
        {
			if (PlayersColor == CAuebTrilizaDocument::EX)
			{
			  //paizw deyteros && X
			  params = _L("C");
			}
			else
			{
			  //paizw deyteros && O
			  params = _L("D");
			}
			iDocument->NewGame(CAuebTrilizaDocument::EOpponent, PlayersColor);
		}

		if(iServer->IsConnected())
		{
			iServer->Send(params);

			// switch to 2nd view
			ActivateLocalViewL(KView2Id);
		}

	}

	}

/**
* Begin Server side communication.
*
* Starts Server - this will start the server and configure the security settings
*/
void CAuebTrilizaAppUi::StartReceivingL()
	{
	iServer->StartServerL();
	}

// End of File
