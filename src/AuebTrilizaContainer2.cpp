/*
* ============================================================================
*  Name     : CAuebTrilizaContainer2 from AuebTrilizaContainer2.cpp
*  Part of  : AuebTriliza
*  Created  : 11/12/2004 by Makidis Mixalis & Karakatsiotis Giorgos
*  Implementation notes:
*     Initial content was generated by Series 60 AppWizard. *  Version  :
*  Copyright: Makidis Mixalis & Karakatsiotis Giorgos 2004-2005
* ============================================================================
*/

// INCLUDE FILES
#include "AuebTrilizaContainer2.h"
#include <AuebTriliza.rsg>  // for resources

#include <AuebTriliza.mbg> // for bitmap
#include <stringloader.h>  // for StringLoader
#include <aknnotewrappers.h> // for notes

// ================= MEMBER FUNCTIONS =======================

CAuebTrilizaContainer2::CAuebTrilizaContainer2( CAuebTrilizaAppUi * aUi, CAuebTrilizaDocument * aDocument )
   : iUi( aUi ), iDocument( aDocument )
{
}

// ---------------------------------------------------------
// CAuebTrilizaContainer2::ConstructL(const TRect& aRect)
// EPOC two phased constructor
// ---------------------------------------------------------
//
void CAuebTrilizaContainer2::ConstructL( const TRect & aRect )
{
  CreateWindowL();

  // load the bitmaps
  _LIT( KTxtMBMname, "AuebTriliza.mbm" );

  iSX = new( ELeave )CFbsBitmap();
  LoadBitmapL( iSX, KTxtMBMname, EMbmAuebtrilizaSx, ETrue );

  iSO = new( ELeave )CFbsBitmap();
  LoadBitmapL( iSO, KTxtMBMname, EMbmAuebtrilizaSo, ETrue );
  if(iDocument->GetCurrentTurn() != CAuebTrilizaDocument::ECurrentPlayer &&
	  !iDocument->iMultiplayer)
   PerformMove(iDocument->GetAIMove());

  SetRect( aRect );
  ActivateL();
}

// Destructor
CAuebTrilizaContainer2::~CAuebTrilizaContainer2()
{
  delete iSX;
  delete iSO;
}

// ---------------------------------------------------------
// CAuebTrilizaContainer2::SizeChanged()
// Called by framework when the view size is changed
// ---------------------------------------------------------
//
void CAuebTrilizaContainer2::SizeChanged()
{
}

// ---------------------------------------------------------
// CAuebTrilizaContainer2::CountComponentControls() const
// ---------------------------------------------------------
//
TInt CAuebTrilizaContainer2::CountComponentControls() const
{
  return 0; // return nbr of controls inside this container
}

// ---------------------------------------------------------
// CAuebTrilizaContainer2::ComponentControl(TInt aIndex) const
// ---------------------------------------------------------
//
CCoeControl * CAuebTrilizaContainer2::ComponentControl( TInt /* aIndex */ )const
{
  return NULL;
}

// ---------------------------------------------------------
// CAuebTrilizaContainer2::Draw(const TRect& aRect) const
// ---------------------------------------------------------
//
void CAuebTrilizaContainer2::Draw( const TRect & aRect ) const
{
  CWindowGc & gc = SystemGc();
  gc.Clear();

  gc.SetPenSize( TSize( 1, 1 ) );
  gc.SetPenColor( KRgbBlack );
  gc.SetPenStyle( CGraphicsContext::ESolidPen );

  TInt x1 = ( aRect.Width() - 2 ) / 3;
  TInt x2 = 2 * x1;
  TInt y1 = 47; //(aRect.Height() - 2)/3;
  TInt y2 = 2 * y1;

  gc.DrawLine( TPoint( x1, 1 ), TPoint( x1, aRect.Height() - 2 ) );
  gc.DrawLine( TPoint( x2, 1 ), TPoint( x2, aRect.Height() - 2 ) );
  gc.DrawLine( TPoint( 1, y1 ), TPoint( aRect.Width() - 2, y1 ) );
  gc.DrawLine( TPoint( 1, y2 ), TPoint( aRect.Width() - 2, y2 ) );

  TPoint point1, point2;

  for ( TInt i = 0; i < 3; i++ )
  {
    for ( TInt j = 0; j < 3; j++ )
    {
      TRect rect( TPoint( 2 + j * 58, 2 + i * 47 ), TSize( 55, 44 ) );
      TInt currentPos = i * 3 + j;
      CAuebTrilizaDocument::TPiece currentPiece = iDocument->GetPiece( currentPos );
      CFbsBitmap * theBitmap = NULL;

      // Get the points at which we draw the winner's line
      if ( iDocument->GetWinner() != CAuebTrilizaDocument::EEmpty && iDocument->GetWinnerPoints().iX == currentPos )
        point1 = rect.Center();
      if ( iDocument->GetWinner() != CAuebTrilizaDocument::EEmpty && iDocument->GetWinnerPoints().iY == currentPos )
        point2 = rect.Center();

      // Draw the piece
      if ( currentPiece == CAuebTrilizaDocument::EX )
        theBitmap = iSX;
      else if ( currentPiece == CAuebTrilizaDocument::EO )
        theBitmap = iSO;

      if ( theBitmap ) gc.DrawBitmap( rect, theBitmap );

      if ( iDocument->iCurrentPos == currentPos && iDocument->GetWinner() == CAuebTrilizaDocument::EEmpty
		  && !iDocument->IsTableFull() && iDocument->GetCurrentTurn() == CAuebTrilizaDocument::ECurrentPlayer )
           {
             gc.SetPenSize( TSize( 1, 1 ) );
             gc.SetPenColor( KRgbRed );
             gc.SetPenStyle( CGraphicsContext::EDashedPen );
             gc.DrawRect( rect );
      }
    }
  }

  // Draw the winner's line
  if ( iDocument->GetWinner() != CAuebTrilizaDocument::EEmpty )
  {
    gc.SetPenSize( TSize( 3, 3 ) );
	if(iDocument->GetWinner() == iDocument->GetPlayersColor())
		gc.SetPenColor( KRgbGreen );
	else
		gc.SetPenColor( KRgbRed );
    gc.SetPenStyle( CGraphicsContext::ESolidPen );
    gc.DrawLine( point1, point2 );
  }

}

void CAuebTrilizaContainer2::PerformMove()
{
	// Check move's validity
	if ( iDocument->GetWinner() != CAuebTrilizaDocument::EEmpty ||
		iDocument->IsTableFull() ||
		iDocument->GetCurrentTurn() != CAuebTrilizaDocument::ECurrentPlayer)
	  return;

    if(PerformMove(iDocument->iCurrentPos))
	{
		if(iDocument->iMultiplayer)
		{
			// Send the position
			TBuf<1> message;
			message.AppendNum(iDocument->iCurrentPos);
			if ( !iDocument->IsServer() )
			  iUi->iClient->Send( message );
			else
			  iUi->iServer->Send( message );
		}
		else // make the AI move
		{
			if ( iDocument->GetWinner() == CAuebTrilizaDocument::EEmpty &&
				!iDocument->IsTableFull() &&
				iDocument->GetCurrentTurn() != CAuebTrilizaDocument::ECurrentPlayer)
			{
				PerformMove(iDocument->GetAIMove());
			}
		}
	}
}

TBool CAuebTrilizaContainer2::PerformMove(TInt aPosition)
{
	TBool isValidMove = iDocument->PerformMove( aPosition );
	if ( !isValidMove )
	{
		HBufC * textResource = StringLoader::LoadLC( R_INVALID_MOVE );
		CAknErrorNote * note = new( ELeave )CAknErrorNote();
		note->ExecuteLD( * textResource );
		CleanupStack::PopAndDestroy( textResource );
	}
	else
	{
		UpdateDisplay();
		if ( iDocument->GetWinner() != CAuebTrilizaDocument::EEmpty )
		{
		  if ( iDocument->GetWinner() == iDocument->GetPlayersColor() )
		  {
			HBufC * textResource = StringLoader::LoadLC( R_YOU_WIN );
			CAknInformationNote * note = new( ELeave )CAknInformationNote();
			note->ExecuteLD( * textResource );
			CleanupStack::PopAndDestroy( textResource );
		  }
		  else
		  {
			HBufC * textResource = StringLoader::LoadLC( R_YOU_LOST );
			CAknInformationNote * note = new( ELeave )CAknInformationNote();
			note->ExecuteLD( * textResource );
			CleanupStack::PopAndDestroy( textResource );
		  }
		}
		else if ( iDocument->IsTableFull() )
		{
		  HBufC * textResource = StringLoader::LoadLC( R_DRAW );
		  CAknInformationNote * note = new( ELeave )CAknInformationNote();
		  note->ExecuteLD( * textResource );
		  CleanupStack::PopAndDestroy( textResource );
		}
	}
	return isValidMove;
}

void CAuebTrilizaContainer2::UpdateDisplay()
{
	DrawNow();
	if ( iDocument->GetWinner() != CAuebTrilizaDocument::EEmpty )
	{
		if ( iDocument->GetWinner() == iDocument->GetPlayersColor() )
		{
			HBufC * textResource = StringLoader::LoadLC( R_YOU_WIN );
			iUi->ShowAtNaviPanelL(*textResource);
			CleanupStack::PopAndDestroy( textResource );
		}
		else
		{
			HBufC * textResource = StringLoader::LoadLC( R_YOU_LOST );
			iUi->ShowAtNaviPanelL(*textResource);
			CleanupStack::PopAndDestroy( textResource );
		}
	}
	else
	{
		if ( iDocument->IsTableFull() )
		{
			HBufC * textResource = StringLoader::LoadLC( R_DRAW );
			iUi->ShowAtNaviPanelL(*textResource);
			CleanupStack::PopAndDestroy( textResource );
		}
		else
		{
			HBufC * textResource;

			if(iDocument->GetCurrentTurn() == CAuebTrilizaDocument::ECurrentPlayer)
				textResource = StringLoader::LoadLC( R_PERFORM_A_MOVE );
			else
				textResource = StringLoader::LoadLC( R_WAIT_FOR_OPPONENT );

			iUi->ShowAtNaviPanelL(*textResource);
			CleanupStack::PopAndDestroy( textResource );
		}
	}
}

// ---------------------------------------------------------
// CAuebTrilizaContainer2::OfferKeyEventL(...)
// Notify key events to editors.
// ---------------------------------------------------------
//
TKeyResponse CAuebTrilizaContainer2::OfferKeyEventL( const TKeyEvent & aKeyEvent, TEventCode /* aType */ )
{
  switch ( aKeyEvent.iCode )
  {
    case EKeyLeftArrow:
      {
        TInt currentPos = iDocument->iCurrentPos;
        if ( currentPos != 0 && currentPos != 3 && currentPos != 6 )
        {
          iDocument->iCurrentPos--;
          UpdateDisplay();
          return EKeyWasConsumed;
        }
        else
          return EKeyWasNotConsumed;
      break;
      }
    case EKeyRightArrow:
      {
        TInt currentPos = iDocument->iCurrentPos;
        if ( currentPos != 2 && currentPos != 5 && currentPos != 8 )
        {
          iDocument->iCurrentPos++;
          UpdateDisplay();
          return EKeyWasConsumed;
        }
        else
          return EKeyWasNotConsumed;
      break;
      }
    case EKeyUpArrow:
      {
        if ( iDocument->iCurrentPos > 2 )
        {
          iDocument->iCurrentPos -= 3;
          UpdateDisplay();
          return EKeyWasConsumed;
        }
        else
          return EKeyWasNotConsumed;
      break;
      }
    case EKeyDownArrow:
      {
        if ( iDocument->iCurrentPos < 6 )
        {
          iDocument->iCurrentPos += 3;
          UpdateDisplay();
          return EKeyWasConsumed;
        }
        else
          return EKeyWasNotConsumed;
      break;
      }
    break;
    case EKeyEnter:
    case EKeyOK:
      {
        PerformMove();
        return EKeyWasConsumed;
      break;
      }
    default:
      return EKeyWasNotConsumed;
    break;
  }
}

// ---------------------------------------------------------
// CAuebTrilizaContainer2::HandleControlEventL(
//     CCoeControl* aControl,TCoeEvent aEventType)
// ---------------------------------------------------------
//
void CAuebTrilizaContainer2::HandleControlEventL( CCoeControl * /* aControl */, TCoeEvent /* aEventType */ )
{
}

// based on a Forum Nokia Discussion topic
void CAuebTrilizaContainer2::LoadBitmapL( CFbsBitmap * aBitMap, const TDesC & aFileName, TInt aId, TBool aShareIfLoaded )
{
  TFileName DefaultPath;

  // This gives complete path name to the application
  DefaultPath.Copy( CEikonEnv::Static()->EikAppUi()->Application()->AppFullName() );

  // now parse and strip of the application name
  TParsePtr parse( DefaultPath );

  // Copy back only drive and path
  DefaultPath.Copy( parse.DriveAndPath() );

  // Append the filename
  DefaultPath.Append( aFileName );

  User::LeaveIfError( aBitMap->Load( DefaultPath, aId, aShareIfLoaded ) );
}

// End of File
