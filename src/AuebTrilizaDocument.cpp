/*
* ============================================================================
*  Name     : CAuebTrilizaDocument from AuebTrilizaDocument.h
*  Part of  : AuebTriliza
*  Created  : 11/12/2004 by Makidis Mixalis & Karakatsiotis Giorgos
*  Implementation notes:
*     Initial content was generated by Series 60 AppWizard.
*  Copyright: Makidis Mixalis & Karakatsiotis Giorgos 2004-2005
* ============================================================================
*/

// INCLUDE FILES
#include "AuebTrilizaDocument.h"
#include "AuebTrilizaAppUi.h"

#include <e32math.h> //for random numbers (AI)

// ================= MEMBER FUNCTIONS =======================

// constructor
CAuebTrilizaDocument::CAuebTrilizaDocument(CEikApplication& aApp)
: CAknDocument(aApp)
    {
    }

// destructor
CAuebTrilizaDocument::~CAuebTrilizaDocument()
    {
      delete iSeed;
    }

// EPOC default constructor can leave.
void CAuebTrilizaDocument::ConstructL()
    {
	for(TUint i = 0; i < 9; i++)
	{
		iTable[i] = EEmpty;
	}
        iSeed = new TInt64(834);
    }

// Two-phased constructor.
CAuebTrilizaDocument* CAuebTrilizaDocument::NewL(
        CEikApplication& aApp)     // CAuebTrilizaApp reference
    {
    CAuebTrilizaDocument* self = new (ELeave) CAuebTrilizaDocument( aApp );
    CleanupStack::PushL( self );
    self->ConstructL();
    CleanupStack::Pop();

    return self;
    }

// ----------------------------------------------------
// CAuebTrilizaDocument::CreateAppUiL()
// constructs CAuebTrilizaAppUi
// ----------------------------------------------------
//
CEikAppUi* CAuebTrilizaDocument::CreateAppUiL()
    {
	iUi = new (ELeave) CAuebTrilizaAppUi(this);
    return iUi;
    }

void CAuebTrilizaDocument::NewGame(TPlayer aWhoPlaysFirst, TPiece aCurrentPlayersColor, TBool aMultiplayer)
{
	for(TInt i = 0; i < 9; i++)
	{
		iTable[i] = EEmpty;
	}
	iCurrentTurn = aWhoPlaysFirst;
	iPlayersColor = aCurrentPlayersColor;
	iCurrentPos = 4;
	iWinner = EEmpty;
	iTableFull = EFalse;
	iMultiplayer = aMultiplayer;

}

TBool CAuebTrilizaDocument::PerformMove(TInt aPosition)
{
	if(iTable.At(aPosition) == EEmpty)
	{
		if(iCurrentTurn == ECurrentPlayer)
			iTable[aPosition] = iPlayersColor;
		else
			iTable[aPosition] = GetOpponentsColor();
		iCurrentTurn = (iCurrentTurn == ECurrentPlayer) ? EOpponent : ECurrentPlayer;
		if(CheckVictoryCondition(iPlayersColor))
			iWinner = iPlayersColor;
		if(CheckVictoryCondition(GetOpponentsColor()))
			iWinner = GetOpponentsColor();
		CheckTableFull();

		return ETrue;
	}
	return EFalse;
}

CAuebTrilizaDocument::TPiece CAuebTrilizaDocument::GetOpponentsColor()
{
	if(iPlayersColor == EX) return EO;
	return EX;
}

TBool CAuebTrilizaDocument::CheckVictoryCondition(TPiece aColor)
{
	if(iTable[0] == aColor && iTable[1] == aColor && iTable[2] == aColor)
	{
		iWinnerPoints.SetXY(0, 2);
		return ETrue;
	}
	if(iTable[3] == aColor && iTable[4] == aColor && iTable[5] == aColor)
	{
		iWinnerPoints.SetXY(3, 5);
		return ETrue;
	}
	if(iTable[6] == aColor && iTable[7] == aColor && iTable[8] == aColor)
	{
		iWinnerPoints.SetXY(6, 8);
		return ETrue;
	}
	if(iTable[0] == aColor && iTable[3] == aColor && iTable[6] == aColor)
	{
		iWinnerPoints.SetXY(0, 6);
		return ETrue;
	}
	if(iTable[1] == aColor && iTable[4] == aColor && iTable[7] == aColor)
	{
		iWinnerPoints.SetXY(1, 7);
		return ETrue;
	}
	if(iTable[2] == aColor && iTable[5] == aColor && iTable[8] == aColor)
	{
		iWinnerPoints.SetXY(2, 8);
		return ETrue;
	}
	if(iTable[0] == aColor && iTable[4] == aColor && iTable[8] == aColor)
	{
		iWinnerPoints.SetXY(0, 8);
		return ETrue;
	}
	if(iTable[6] == aColor && iTable[4] == aColor && iTable[2] == aColor)
	{
		iWinnerPoints.SetXY(6, 2);
		return ETrue;
	}
	return EFalse;
}

void CAuebTrilizaDocument::CheckTableFull()
{
	for(TInt i = 0; i < 9; i++)
	{
		if(iTable[i] == EEmpty)
		{
			iTableFull = EFalse;
			return;
		}
	}
	iTableFull = ETrue;
}

TInt CAuebTrilizaDocument::GetAIMove()
{
	TPiece side = GetOpponentsColor();
	TInt lastMove = iCurrentPos;

  // elegxos poses kinhseis exoyn ginei (koitwntas tis adeies 8eseis)
  TInt numberMoves = 9;
  for(TInt i = 0; i < 9; i++)
  {
        if(iTable[i] == EEmpty)
        {
                numberMoves--;
        }
  }

  TInt move;
  // Mia math.random panta kanei ta pragmata pio alh8ina
  if (numberMoves == 0)
  {

    move = Math::Rand(*iSeed)%9;
    return move;
  }
  else
  if (numberMoves == 1)
  {
	if (lastMove == 0 || lastMove == 2 || lastMove == 6 || lastMove == 8)
	{
          if (iDifficulty == EEasy)
          {
		move = Math::Rand(*iSeed)%16;
		if (move%2 == 1)
		{
			if (move/2 < lastMove)
			  return move/2;
			else
			{
			  move = move+2;
			  return move/2;
			}

		}
		else
		{
		  return 4;
		}
          }
          else
            return 4;
	}
	else
	{
          if (iDifficulty != EEasy && lastMove == 4)
          {
            move = Math::Rand(*iSeed)%4;
            if (move == 0 || move == 1 || move == 3)
              return 2*move;
            else
              return 8;

          }
		move = Math::Rand(*iSeed)%8;
		if (move < lastMove)
		  return move;
		else
		{
		  move++;
		  return move;
		}
	}
  }
  else if (numberMoves == 2)
  {
    // exw kentro
    if (iTable[4]==side)
    {// exei mesaio
      if (lastMove%2==1)
      {
        move = Math::Rand(*iSeed)%2;
        if (lastMove == 1)
          if (move == 0)
            return 6;
          else
            return 8;
        else if (lastMove == 3)
          if (move == 0)
            return 2;
          else
            return 8;
        else if (lastMove == 5)
          if (move == 0)
            return 0;
          else
            return 6;
        else if (lastMove == 7)
          if (move == 0)
            return 0;
          else
            return 2;
      }
      else if (lastMove == 6)
        return 2;
      else if (lastMove == 4)
        return 0;
      else  // exei paijei gwnia
      {
        return 8-lastMove;
      }
    }// exw gwnia
    else if (iTable[0]==side||iTable[2]==side||iTable[6]==side||iTable[8]==side)
    {// exei kentro
      if (lastMove == 4)
      {
        move = Math::Rand(*iSeed)%7;
        for (int i = 0; i<9; i++)
        {
          if (iTable[i]==CAuebTrilizaDocument::EEmpty)
          {
            if (move==0)
            {
              return i;
            }
            else
              move--;
          }
        }
      }// exei gwnia
      else if (lastMove%2 == 0)
      {
        if(iTable[8-lastMove]==EEmpty)
          return 8-lastMove;
        else
          if (iTable[0] == EEmpty)
            return 0;
          else if (iTable[2] == EEmpty)
            return 2;
          else if (iTable[6] == EEmpty)
            return 6;
          else if (iTable[8] == EEmpty)
            return 8;
      }// exei mesaio
      else
      {
        move = Math::Rand(*iSeed)%3;
        if (iTable[0] == EEmpty && move == 0)
            return 0;
          else if (iTable[2] == EEmpty &&move<2)
            return 2;
          else if (iTable[6] == EEmpty&&move>1)
            return 6;
          else if (iTable[8] == EEmpty)
            return 8;
      }
    }// exw mesaio
    else
    {
      move = Math::Rand(*iSeed)%3;
      if (iTable[1] == EEmpty && move == 0)
          return 1;
        else if (iTable[3] == EEmpty &&move<2)
          return 3;
        else if (iTable[5] == EEmpty&&move>1)
          return 5;
        else if (iTable[7] == EEmpty)
          return 7;
    }
  }
  else if (numberMoves == 3 && iDifficulty != EEasy)
  {
    if (iTable[0] == iTable[8] && iTable[0] != EEmpty)
    {
      move = Math::Rand(*iSeed)%4;
      if (iTable[1] == EEmpty && move == 0)
            return 1;
          else if (iTable[3] == EEmpty &&move == 2)
            return 3;
          else if (iTable[5] == EEmpty&&move == 1)
            return 5;
          else if (iTable[7] == EEmpty && move ==3)
            return 7;
    }
    else if (iTable[2] ==iTable[6] && iTable[2] != EEmpty)
    {
      move = Math::Rand(*iSeed)%4;
      if (iTable[1] == EEmpty && move == 0)
            return 1;
          else if (iTable[3] == EEmpty &&move == 2)
            return 3;
          else if (iTable[5] == EEmpty&&move == 1)
            return 5;
          else if (iTable[7] == EEmpty && move ==3)
            return 7;
    }
    else
    {
      move = WinningMove(iTable, side);
    if (move >= 0)
      return move;
    else
      {
        move = FindThreat(iTable, side);
        if (move >= 0)
          return move;
      }
      move = FindDoubleThreat(iTable, side);
      if (move>=0)
      {
        return move;
      }
      move = FindOpDoubleThreat(iTable,side);
      if (move>=0)
      {
        return move;
      }

      move = Math::Rand(*iSeed)%(9-numberMoves);
      for (int i = 0; i<9; i++)
      {
        if (iTable[i]==EEmpty)
        {
          if (move==0)
          {
            return i;
          }
          else
            move--;
        }
      }
    }

  }
  else if (numberMoves>2&&numberMoves<7)
  {
    move = WinningMove(iTable, side);
    if (move >= 0)
      return move;
    else
      {
        move = FindThreat(iTable, side);
        if (move >= 0)
          return move;
      }
      move = FindDoubleThreat(iTable, side);
      if (move>=0)
      {
        return move;
      }
      move = FindOpDoubleThreat(iTable,side);
      if (move>=0)
      {
        return move;
      }

      move = Math::Rand(*iSeed)%(9-numberMoves);
      for (int i = 0; i<9; i++)
      {
        if (iTable[i]==EEmpty)
        {
          if (move==0)
          {
            return i;
          }
          else
            move--;
        }
      }
  }
  // yparxoyn 2 kinhseis
  else if (numberMoves == 7)
  {
    move = WinningMove(iTable, side);
    if (move >= 0)
      return move;
    else
      {
        move = FindThreat(iTable, side);
        if (move >= 0)
          return move;
      }
      move = Math::Rand(*iSeed)%2;
      if (move ==0)
        for (int i=0; i < 9; i++)
        {
          if (iTable[i] == EEmpty)
            return i;
        }
      else
        for (int i=8; i >= 0; i--)
        {
          if (iTable[i] == EEmpty)
            return i;
        }

      return move;

  }

  // yparxei mono mia kinhsh
  else if (numberMoves == 8)
  {
    for(TInt i = 0; i < 9; i++)
    {
      if(iTable[i] == EEmpty)
      {
              return i;
      }
    }

  }

  return 1;
}

TInt CAuebTrilizaDocument::WinningMove(TFixedArray<TPiece, 9> aTable, TPiece aColor)
{
  for(TInt i = 0; i < 9; i++)
  {
      if(aTable[i] == EEmpty)
      {
        if (CheckVictoryCondition(aTable, i, aColor))
              return i;
      }
  }

  return -1;

}

TInt CAuebTrilizaDocument::FindThreat(TFixedArray<TPiece, 9> aTable, TPiece aColor)
{
  TPiece opColor;
  if (aColor == EX)
    opColor = EO;
  else
    opColor = EX;

  for(TInt i = 0; i < 9; i++)
  {
      if(aTable[i] == EEmpty)
      {
        if (CheckVictoryCondition(aTable, i, opColor))
              return i;
      }
  }

  return -1;
}

TInt CAuebTrilizaDocument::FindDoubleThreat(TFixedArray<TPiece, 9> aTable, TPiece aColor)
{

  TInt threats = 0;
  TFixedArray<TPiece, 9> newTable;
  for(TInt k = 0; k < 9; k++)
  {
    newTable[k] = aTable[k];
  }

  for(TInt i = 0; i < 9; i++)
  {
      if(newTable[i] == EEmpty)
      {
        if (iDifficulty != EEasy)
          newTable[i] = aColor;

    for(TInt j = 0; j < 9; j++)
    {
        if(newTable[j] == EEmpty)
        {
          if (CheckVictoryCondition(newTable, j, aColor))
              threats++;
        }
    }
    if (iDifficulty != EEasy)
      newTable[i] = EEmpty;
      }
    if (threats>1)
      return i;
    else
      threats = 0;
  }
  return -1;
}

TInt CAuebTrilizaDocument::FindOpDoubleThreat(TFixedArray<TPiece, 9> aTable, TPiece aColor)
{
  TPiece opColor;
  if (aColor == EX)
    opColor = EO;
  else
    opColor = EX;

  for(TInt i = 0; i < 9; i++)
    {
        if(aTable[i] == EEmpty)
          if (iDifficulty != EEasy)
          {
            aTable[i] = aColor;

            TInt move = FindDoubleThreat(aTable, opColor);

            if (move>=0)
            {
              if (WinningMove(aTable, aColor)>=0 && WinningMove(aTable, aColor)!=move)
                return i;
            }
            else
              return i;
            aTable[i] = EEmpty;
          }
          else
          {
            TInt move = FindDoubleThreat(aTable, opColor);
            if (move>=0)
              return move;
          }
    }
  return -1;
}

TBool CAuebTrilizaDocument::CheckVictoryCondition(TFixedArray<TPiece, 9> aRealTable, TInt aPosition,  TPiece aColor)
{
  //copy table
  TFixedArray<TPiece, 9> table;
  for(TInt i = 0; i < 9; i++)
  {
    table[i] = aRealTable[i];
  }

  table[aPosition] = aColor;

        if(table[0] == aColor && table[1] == aColor && table[2] == aColor)
        {
                return ETrue;
        }
        if(table[3] == aColor && table[4] == aColor && table[5] == aColor)
        {
                return ETrue;
        }
        if(table[6] == aColor && table[7] == aColor && table[8] == aColor)
        {
                return ETrue;
        }
        if(table[0] == aColor && table[3] == aColor && table[6] == aColor)
        {
                return ETrue;
        }
        if(table[1] == aColor && table[4] == aColor && table[7] == aColor)
        {
                return ETrue;
        }
        if(table[2] == aColor && table[5] == aColor && table[8] == aColor)
        {
                return ETrue;
        }
        if(table[0] == aColor && table[4] == aColor && table[8] == aColor)
        {
                return ETrue;
        }
        if(table[6] == aColor && table[4] == aColor && table[2] == aColor)
        {
                return ETrue;
        }
        return EFalse;
}



void CAuebTrilizaDocument::IsServer(TBool aIsServer)
{
  isServer = aIsServer;
}

TBool CAuebTrilizaDocument::IsServer()
{
  return isServer;
}

void CAuebTrilizaDocument::SetDifficulty(TDifficulty aDifficulty)
{
	iDifficulty = aDifficulty;
}

// End of File
