/* ============================================================================
*  Name     : CBluetoothAdvertiser from BluetoothAdvertiser.cpp
*  Part of  : AuebTriliza
*  Created  : 11/12/2004 by Makidis Mixalis & Karakatsiotis Giorgos
*  Implementation notes:
*     Initial content was generated by Series 60 AppWizard.
*  Copyright: Makidis Mixalis & Karakatsiotis Giorgos 2004-2005
* ============================================================================
*/

#include <bt_sock.h>
#include "BluetoothAdvertiser.h"
#include "BluetoothDefinitions.h"
#include "AuebTrilizaApp.h"

// Constants
const TUint KStateFullyUnused = 0xFF;
const TUint KStateFullyUsed   = 0x00;


// Constructor
CBluetoothAdvertiser::CBluetoothAdvertiser()
: iRecord(0),
  iIsConnected(EFalse)
	{
	}


// Destructor
CBluetoothAdvertiser::~CBluetoothAdvertiser()
	{
	if (IsAdvertising())
		{
		TRAPD(err,StopAdvertisingL());
		}

	iSdpDatabase.Close();
	iSdpSession.Close();
	}

// Constructor
CBluetoothAdvertiser* CBluetoothAdvertiser::NewL()
	{
	CBluetoothAdvertiser* self = CBluetoothAdvertiser::NewLC();
	CleanupStack::Pop(self);
	return self;
	}

// Constructor
CBluetoothAdvertiser* CBluetoothAdvertiser::NewLC()
	{
	CBluetoothAdvertiser* self = new (ELeave) CBluetoothAdvertiser();
	CleanupStack::PushL(self);
	self->ConstructL();
	return self;
	}


// Constructor
void CBluetoothAdvertiser::ConstructL()
	{
	}


// Anoigei thn syndesi (enhmerwnei th Service Discovery Database)
void CBluetoothAdvertiser::ConnectL()
	{
	if (!iIsConnected)
		{
		User::LeaveIfError(iSdpSession.Connect());
		User::LeaveIfError(iSdpDatabase.Open(iSdpSession));
		iIsConnected = ETrue;
		}
	}


// Ksekina to advertising (dhmioyrgei mia eggrafh sto Service Discovery Database.
void CBluetoothAdvertiser::StartAdvertisingL(TInt aPort)
	{
	if (IsAdvertising())
		{
		StopAdvertisingL();
		}
	if (! iIsConnected)
		{
		ConnectL();
		}

	iSdpDatabase.CreateServiceRecordL(KUidAuebTriliza.iUid, iRecord);

	CSdpAttrValueDES* vProtocolDescriptor = CSdpAttrValueDES::NewDESL(NULL);
	CleanupStack::PushL(vProtocolDescriptor);

	BuildProtocolDescriptionL(vProtocolDescriptor,aPort);

	iSdpDatabase.UpdateAttributeL(iRecord, KSdpAttrIdProtocolDescriptorList, *vProtocolDescriptor);

	CleanupStack::PopAndDestroy(vProtocolDescriptor);

	iSdpDatabase.UpdateAttributeL(iRecord,
								  KSdpAttrIdBasePrimaryLanguage+KSdpAttrIdOffsetServiceName,
								  KServiceName);

	iSdpDatabase.UpdateAttributeL(iRecord,
								  KSdpAttrIdBasePrimaryLanguage+KSdpAttrIdOffsetServiceDescription,
								  KServiceDescription);
	}

// Enhmerwnei th diathesimothta (poses syndeseis exoyn ginei)
void CBluetoothAdvertiser::UpdateAvailabilityL(TBool aIsAvailable)
	{
	TUint state;
	if (aIsAvailable)
		{
		state = KStateFullyUnused;
		}
	else
		{
		state = KStateFullyUsed;
		}

	iSdpDatabase.UpdateAttributeL(iRecord, KSdpAttrIdServiceAvailability, state);

	iSdpDatabase.UpdateAttributeL(iRecord, KSdpAttrIdServiceRecordState, ++iRecordState);
	}

// Stamata to advertising
void CBluetoothAdvertiser::StopAdvertisingL()
	{
	if (IsAdvertising())
		{
		iSdpDatabase.DeleteRecordL(iRecord);
		iRecord = 0;
		}
	}

 void CBluetoothAdvertiser::BuildProtocolDescriptionL(CSdpAttrValueDES* aProtocolDescriptor, TInt aPort)
	{
	TBuf8<1> channel;
	channel.Append((TChar)aPort);

	aProtocolDescriptor
	->StartListL()
		->BuildDESL()
		->StartListL()
			->BuildUUIDL(KL2CAP)
		->EndListL()

		->BuildDESL()
		->StartListL()
			->BuildUUIDL(KRFCOMM)
			->BuildUintL(channel)
		->EndListL()
	->EndListL();
	}

// End of File
