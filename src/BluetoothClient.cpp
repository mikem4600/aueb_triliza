/*
* ============================================================================
*  Name     : CBluetoothClient from BluetoothClient.h
*  Part of  : AuebTriliza
*  Created  : 11/12/2004 by Makidis Mixalis & Karakatsiotis Giorgos
*  Implementation notes:
*     Initial content was generated by Series 60 AppWizard.
*  Copyright: Makidis Mixalis & Karakatsiotis Giorgos 2004-2005
* ============================================================================
*/

// System include
#include <s32mem.h>

// User include
#include "BluetoothClient.h"
#include "BluetoothDefinitions.h"
#include "BluetoothObserver.h"

// Constructor
CBluetoothClient::CBluetoothClient(MBluetoothObserver& aObserver)
: CActive(CActive::EPriorityStandard),
  iObserver(aObserver),
  iState(EDisconnected)
	{
	CActiveScheduler::Add(this);
	}

// Destructor
CBluetoothClient::~CBluetoothClient()
	{
	Cancel();
	Disconnect();
	}

// Constructor.
CBluetoothClient* CBluetoothClient::NewL(MBluetoothObserver& aObserver)
	{
	CBluetoothClient* self = new (ELeave) CBluetoothClient(aObserver);
	CleanupStack::PushL(self);
	self->ConstructL();
	CleanupStack::Pop(self);
	return self;
	}


// Constructor
void CBluetoothClient::ConstructL()
	{
	}

// Aposyndeetai
void CBluetoothClient::DoCancel()
	{
	Disconnect();
	}

// Syndesh me to Server (me socket sto RFCOMM protocol). H syndesh einai asyxronh
void CBluetoothClient::ConnectToServerL(const TBTDevAddr& aBTDevAddr, const TInt aPort)
	{
	iState = EConnecting;

	iSocketAddress.SetBTAddr(aBTDevAddr);
	iSocketAddress.SetPort(aPort);

	User::LeaveIfError(iSocketServer.Connect());
	User::LeaveIfError(iSendingSocket.Open(iSocketServer, KServerTransportName));

	iSendingSocket.Connect(iSocketAddress, iStatus);

#ifdef __WINS__
	User::After(1);
#endif

	SetActive();
	}

// Stelnei ta dedomena
void CBluetoothClient::Send(const TDesC& aMessage)
	{
	TRAPD(err, SendL(aMessage));
	}

void CBluetoothClient::SendL(const TDesC& aMessage)
	{
	iMessage.Zero();
	TDesBuf buffer;	
	buffer.Set (iMessage);
	
	RWriteStream stream(&buffer);
	CleanupClosePushL(stream);

	stream << aMessage;
	
	CleanupStack::PopAndDestroy();

	iState = ESendData;
	iSendingSocket.Write(iMessage, iStatus);
	SetActive();
	}

// Zhta dedeomena
void CBluetoothClient::RequestData()
	{
	iMessage.Zero();

	iState = EWaitingForMessage;
	iSendingSocket.RecvOneOrMore(iMessage, 0, iStatus, iLen);
	SetActive();
	}

// H RunL tou Active Object
void CBluetoothClient::RunL()
	{
	if (iStatus.Int() == KErrNone)
		{
		switch (iState)
			{
			case EConnecting:
				{
				iObserver.ConnectedL();
				iState = EConnected;
				RequestData();
				break;
				}

			case EWaitingForMessage:
				{
				iState = EConnected;

				TDesBuf buffer;	
				buffer.Set (iMessage);

				RReadStream stream (&buffer);
				CleanupClosePushL(stream);

				TBuf<KMaxMessageLength> rxBuf;

				stream >> rxBuf;

				CleanupStack::PopAndDestroy();
				
				iObserver.DataReceivedL(rxBuf);
				break;
				}

			case ESendData:
				{
				RequestData();
				break;
				}

			default:
				Panic(EInvalidClientState);
				break;
			}
		}
	else
		{
		Disconnect();
		iObserver.HandleErrorL(iStatus.Int());
		}
	}

// Ektelei aposyndesi
void CBluetoothClient::Disconnect()
	{
	if (iState != EDisconnected)
		{
		iSendingSocket.CancelAll();
		iSendingSocket.Close();
		iSocketServer.Close();
		}

	iState = EDisconnected;
	}

// Epistrefei tin katastasi tis syndesis
TBool CBluetoothClient::IsConnected()
	{
	return !(iState == EDisconnected);
	}

// Epistrefei an einai dynaton na apostalloun dedomena
// (dil. yparxei syndesi)
TBool CBluetoothClient::AvailableToSend()
	{
	return (iState == EConnected);
	}

// End of File