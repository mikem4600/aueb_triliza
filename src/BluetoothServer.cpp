/*
* ============================================================================
*  Name     : CBluetoothServer from BluetoothServer.h
*  Part of  : AuebTriliza
*  Created  : 11/12/2004 by Makidis Mixalis & Karakatsiotis Giorgos
*  Implementation notes:
*     Initial content was generated by Series 60 AppWizard.
*  Copyright: Makidis Mixalis & Karakatsiotis Giorgos 2004-2005
* ============================================================================
*/

// System include
#include <bt_sock.h>
#include <s32mem.h>

// User include
#include "BluetoothServer.h"
#include "BluetoothAdvertiser.h"
#include "AuebTrilizaApp.h"

// Constructor
CBluetoothServer::CBluetoothServer(MBluetoothObserver& aObserver)
: CActive(CActive::EPriorityStandard),
  iObserver(aObserver),
  iState(EDisconnected)
	{
	CActiveScheduler::Add(this);
	}

// Constructor
CBluetoothServer* CBluetoothServer::NewL(MBluetoothObserver& aObserver)
	{
	CBluetoothServer* self = NewLC(aObserver);
	CleanupStack::Pop(self);
	return self;
	}

// Constructor
CBluetoothServer* CBluetoothServer::NewLC(MBluetoothObserver& aObserver)
	{
	CBluetoothServer* self = new (ELeave) CBluetoothServer(aObserver);
	CleanupStack::PushL(self);
	self->ConstructL();
	return self;
	}

// Destructor
CBluetoothServer::~CBluetoothServer()
	{
	TRAPD(err,StopL());
    __ASSERT_DEBUG(err == KErrNone, Panic(EErrorStoppingServer));

	Cancel();

	if (iSecSettingsSession.SubSessionHandle() != 0)
		{
		iSecSettingsSession.Close();
		}
	if (iSecManager.Handle() != 0)
		{
		iSecManager.Close();
		}
	if (iAcceptedSocket.SubSessionHandle() != 0)
		{
		iAcceptedSocket.Close();
		}
	if (iListeningSocket.SubSessionHandle() != 0)
		{
		iListeningSocket.Close();
		}
	if (iSocketServer.Handle() != 0)
		{
		iSocketServer.Close();
		}

	delete iAdvertiser;
	}

// Constructor
void CBluetoothServer::ConstructL()
	{
	iAdvertiser = CBluetoothAdvertiser::NewL();
	}

void CBluetoothServer::DoCancel()
	{
	switch(iState)
		{
		case EDisconnected :
			{
			break;
			}
		case ESettingSecurity :
			{
			iSecSettingsSession.CancelRequest(iStatus);	// not asynch call
			break;
			}
		case EConnecting :
			{
			iListeningSocket.CancelAccept();
			break;
			}
		case EConnected :
			{
			break;
			}
		case EWaitingForMessage :
			{
			iAcceptedSocket.CancelRecv();
			break;
			}
		case ESendData :
			{
			iAcceptedSocket.CancelSend();
			break;
			}
		default:
			{
			break;
			}
		}
	}

// Ksekina to Server. Anoigei ena Socket sto RFCOMM
// protocol, gia na akoysei gia aithseis
void CBluetoothServer::StartServerL()
	{
	if (iState != EDisconnected)
		{
		User::Leave(KErrInUse);
		}

	User::LeaveIfError(iSocketServer.Connect());
	User::LeaveIfError(iListeningSocket.Open(iSocketServer, KServerTransportName));

	// Get a channel to listen on - same as the socket's port number
	User::LeaveIfError(iListeningSocket.GetOpt(KRFCOMMGetAvailableServerChannel, KSolBtRFCOMM, iChannel));

	TBTSockAddr listeningAddress;
	listeningAddress.SetPort(iChannel);

	User::LeaveIfError(iListeningSocket.Bind(listeningAddress));
	User::LeaveIfError(iListeningSocket.Listen(KListeningQueSize));

	SetSecurityOnChannelL(EFalse, EFalse, ETrue);
	}

// Rythmizei parametrous asfaleias
void CBluetoothServer::SetSecurityOnChannelL(TBool aAuthentication, TBool aEncryption, TBool aAuthorisation)
	{

	User::LeaveIfError(iSecManager.Connect());
	User::LeaveIfError(iSecSettingsSession.Open(iSecManager));

	TBTServiceSecurity serviceSecurity(KUidAuebTriliza, KSolBtRFCOMM, 0);

	serviceSecurity.SetAuthentication(aAuthentication);
	serviceSecurity.SetEncryption(aEncryption);
	serviceSecurity.SetAuthorisation(aAuthorisation);

	serviceSecurity.SetChannelID(iChannel);

	iSecSettingsSession.RegisterService(serviceSecurity, iStatus);
	iState = ESettingSecurity;
	SetActive();
	}


// Dexetai tis aithseis
void CBluetoothServer::AcceptConnectionsL()
	{
	iAcceptedSocket.Close();
	User::LeaveIfError(iAcceptedSocket.Open(iSocketServer));

	iState = EConnecting;

	iListeningSocket.Accept(iAcceptedSocket, iStatus);

	SetActive();

	iObserver.ServerStartedL();
	}

// Ksekina to advertising
void CBluetoothServer::StartAdvertisingL()
	{
	iAdvertiser->StartAdvertisingL(iChannel);
	iAdvertiser->UpdateAvailabilityL(ETrue);
	}

// Stamata to advertising, kleinei tis syndeseis kai ta sockets
void CBluetoothServer::StopL()
	{
	if (iState != EDisconnected)
		{
		if (iAdvertiser->IsAdvertising())
			{
			iAdvertiser->StopAdvertisingL();
			}

		iAcceptedSocket.Close();
		iListeningSocket.Close();
		iSocketServer.Close();
		}

	iState = EDisconnected;
	}

// Stelnei dedomena
void CBluetoothServer::Send(const TDesC& aMessage)
	{
	TRAPD(err, SendL(aMessage));
	}


void CBluetoothServer::SendL(const TDesC& aMessage)
	{
	iMessage.Zero();
	TDesBuf buffer;	
	buffer.Set (iMessage);
	
	RWriteStream stream(&buffer);
	CleanupClosePushL(stream);

	stream << aMessage;
	
	CleanupStack::PopAndDestroy();

	iState = ESendData;
	iAcceptedSocket.Write(iMessage, iStatus);
	SetActive();
	}

// Dexetai dedomena
void CBluetoothServer::RequestData()
	{
	iMessage.Zero();

	iState = EWaitingForMessage;
	iAcceptedSocket.RecvOneOrMore(iMessage, 0, iStatus, iLen);
	SetActive();
	}

// H RunL tou Active Object
void CBluetoothServer::RunL()
	{
	if (iStatus.Int() == KErrNone)
		{
		switch (iState)
			{
			case ESettingSecurity :
				{
				iSecSettingsSession.Close();
				iSecManager.Close();

				AcceptConnectionsL();
				break;
				}
			case EConnecting:
				{
				iObserver.ConnectedL();
				iAdvertiser->StopAdvertisingL();
				break;
				}

			case EWaitingForMessage:
				{
				iState = EConnected;
				TDesBuf buffer;	
				buffer.Set (iMessage);

				RReadStream stream (&buffer);
				CleanupClosePushL(stream);

				TBuf<KMaxMessageLength> rxBuf;

				stream >> rxBuf;

				CleanupStack::PopAndDestroy();

				iObserver.DataReceivedL(rxBuf);
				break;
				}

			case ESendData:
				{
				
					RequestData();
				break;
				}

			default:
				Panic(EInvalidServerState);
				break;
			}
		}
	else
		{
		StopL();
		iObserver.HandleErrorL(iStatus.Int());
		}
	}

// Elegxei an o server exei synde8ei
TBool CBluetoothServer::IsConnected()
	{
	return !(iState == EDisconnected);
	}

// Elegxei an o server mporei na steilei
TBool CBluetoothServer::AvailableToSend()
	{
	return (iState == EConnected);
	}

// End of File
