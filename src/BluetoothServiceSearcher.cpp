/*
* ============================================================================
*  Name     : CBluetoothServiceSearcher from BluetoothServiceSearcher.h
*  Part of  : AuebTriliza
*  Created  : 11/12/2004 by Makidis Mixalis & Karakatsiotis Giorgos
*  Implementation notes:
*     Initial content was generated by Series 60 AppWizard.
*  Copyright: Makidis Mixalis & Karakatsiotis Giorgos 2004-2005
* ============================================================================
*/

// System includes
#include <aknwaitdialog.h>
#include <AuebTriliza.rsg>
#include "AuebTrilizaApp.h"

// User includes
#include "BluetoothDefinitions.h"
#include "BluetoothServiceSearcher.h"
#include "TBluetoothAttributeParser.h"

// Constructor
CBluetoothServiceSearcher* CBluetoothServiceSearcher::NewLC(TInt& aPort)
	{
	CBluetoothServiceSearcher* self = new (ELeave) CBluetoothServiceSearcher(aPort);
	CleanupStack::PushL(self);
	self->ConstructL();
	return self;
	}

// Constructor
CBluetoothServiceSearcher* CBluetoothServiceSearcher::NewL(TInt& aPort)
	{
	CBluetoothServiceSearcher* self = CBluetoothServiceSearcher::NewLC(aPort);
	CleanupStack::Pop( self );
	return self;
	}

// Constructor
CBluetoothServiceSearcher::CBluetoothServiceSearcher(TInt& aPort)
: iPort(aPort),iSearcherState(KErrNotFound)
  	{
	}

// Destructor
CBluetoothServiceSearcher::~CBluetoothServiceSearcher()
	{
	if (iAgent)
		{
		delete iAgent;
		iAgent = NULL;
		}

	delete iSdpSearchPattern;
	iSdpSearchPattern = NULL;

	delete iMatchList;
	iMatchList = NULL;

	delete iWaitDialog;
	iWaitDialog = NULL;
	}

// Constructor
void CBluetoothServiceSearcher::ConstructL()
	{
	iSdpSearchPattern = CSdpSearchPattern::NewL();
	iSdpSearchPattern->AddL( KUidAuebTriliza.iUid );

	iMatchList = CSdpAttrIdMatchList::NewL();
	iMatchList->AddL( KSdpAttrIdServiceAvailability ); // Availability
	iMatchList->AddL( KSdpAttrIdProtocolDescriptorList ); // Port Number, RFCOMM, L2CAP
	}

// Kleinei ton Searcher
void CBluetoothServiceSearcher::CloseL()
	{
	RemoveProgressDialogL();
	}

// Psaxnei na brei an h sygkekrimenh yphresia parexetai
TInt CBluetoothServiceSearcher::FindServiceL(const TBTDevAddr& aDeviceAddress)
	{
	delete iAgent;
	iAgent = NULL;

	iAgent = CSdpAgent::NewL(*this, aDeviceAddress);
	iAgent->SetRecordFilterL(*iSdpSearchPattern);
	iAgent->NextRecordRequestL();
	DisplayProgressDialogL();

	return iSearcherState;
	}

// Emfanizei to progress Dialog
void CBluetoothServiceSearcher::DisplayProgressDialogL()
	{
	if (!iWaitDialog)
		{
		iWaitDialog = new (ELeave) CAknWaitDialog(NULL, ETrue);
		TInt retVal = iWaitDialog->ExecuteLD(R_BLUETOOTH_CONNECTION_WAIT_DIALOG);
		iWaitDialog = NULL;

		if (retVal != EAknSoftkeyDone)
			{
			iSearcherState = KErrCancel;
			}
		}
	}

// Kleinei to progress Dialog
void CBluetoothServiceSearcher::RemoveProgressDialogL()
	{
	if (iWaitDialog)
		{
		iWaitDialog->ProcessFinishedL();
		iWaitDialog = NULL;
		}
	}

/**********************************************/
// Call back functions from MSdpAgentNotifier //
/**********************************************/

void CBluetoothServiceSearcher::NextRecordRequestComplete(TInt aError, TSdpServRecordHandle aHandle, TInt aTotalRecordsCount)
	{
	TRAPD(error, NextRecordRequestCompleteL(aError, aHandle, aTotalRecordsCount););
	}

void CBluetoothServiceSearcher::NextRecordRequestCompleteL(TInt aError, TSdpServRecordHandle aHandle, TInt aTotalRecordsCount)
	{
	if (aError == KErrNone && aTotalRecordsCount > 0)
		{
		iContinueSearching = ETrue; // Reset for this record

		iAgent->AttributeRequestL(aHandle, *iMatchList);
		}
	else
		{
		RemoveProgressDialogL();
		}
	}

void CBluetoothServiceSearcher::AttributeRequestResult(TSdpServRecordHandle aHandle, TSdpAttributeID aAttrID, CSdpAttrValue* aAttrValue)
	{
	TRAPD(error, AttributeRequestResultL(aHandle, aAttrID, aAttrValue));
	}

void CBluetoothServiceSearcher::AttributeRequestResultL(TSdpServRecordHandle /*aHandle*/, TSdpAttributeID aAttrID, CSdpAttrValue* aAttrValue)
	{
	if (aAttrID == KSdpAttrIdProtocolDescriptorList)
		{
		TBluetoothAttributeParser parser(*this, iContinueSearching);
		aAttrValue->AcceptVisitorL(parser);
		}
	else if (iContinueSearching && aAttrID == KSdpAttrIdServiceAvailability)
		{
		if (aAttrValue->Type() == ETypeUint)
			{
			iAvailable = static_cast<TBool>(aAttrValue->Uint());
			if (iAvailable)
				{
				iSearcherState = KErrNone;
				}
			}
		}
	delete aAttrValue;
	}

void CBluetoothServiceSearcher::AttributeRequestComplete(TSdpServRecordHandle aHandle, TInt aError)
	{
	TRAPD(error, AttributeRequestCompleteL(aHandle, aError););
	}


void CBluetoothServiceSearcher::AttributeRequestCompleteL(TSdpServRecordHandle /*aHandle*/, TInt aError)
	{
	if (aError != KErrNone)
		{
		RemoveProgressDialogL();
		return;
		}
	else if (iSearcherState != KErrNone)
		{

		iAgent->NextRecordRequestL();
		}
	else
		{
		RemoveProgressDialogL();
		}
	}

// Thetei tin port sthn opoia ginetai h epikoinwnia
void CBluetoothServiceSearcher::SetPort(TInt aPort)
	{
	iPort = aPort;
	}

// End of File
