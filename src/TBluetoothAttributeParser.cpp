/*
* ============================================================================
*  Name     : TBluetoothAttributeParser from BluetoothAttributeParser.h
*  Part of  : AuebTriliza
*  Created  : 11/12/2004 by Makidis Mixalis & Karakatsiotis Giorgos
*  Implementation notes:
*     Initial content was generated by Series 60 AppWizard.
*  Copyright: Makidis Mixalis & Karakatsiotis Giorgos 2004-2005
* ============================================================================
*/

// System include
#include <bt_sock.h>

// User include
#include "BluetoothDefinitions.h"
#include "BluetoothAttributeObserver.h"
#include "TBluetoothAttributeParser.h"

// Constructor
TBluetoothAttributeParser::TBluetoothAttributeParser(MBluetoothAttributeObserver& aObserver, TBool& aContinueSearching)
: iObserver(aObserver),
  iContinueSearching(aContinueSearching)
	{
	iProcessingState = EStartOfDesOne;
	iFinished = EFalse;
	}

void TBluetoothAttributeParser::VisitAttributeValueL(CSdpAttrValue& aValue, TSdpElementType /*aType*/)
	{
	switch ( iProcessingState )
		{
		case EStartOfDesOne:
		case EStartOfDesTwo:
		case EL2Cap:
		case EEndOfDesTwo:
		case EStartDesThree:
			break; 

		case ERFComm:
			CompareRFCOMM( aValue );
			break;

		case ERFCommPort:
			GetPort( aValue );
			break;

		case EEndOfDesThree:
		case EEndOfDesOne:
			break; 

		default: 
			Panic(EBadAttributeValue);
			break;
		}

	Next();
	}

void TBluetoothAttributeParser::StartListL(CSdpAttrValueList& /*aList*/)
	{
	}


void TBluetoothAttributeParser::EndListL()
	{
	switch ( iProcessingState )
		{
		case EEndOfDesOne:
		case EEndOfDesTwo:
		case EEndOfDesThree:
			break;

		default:
			User::Leave(KErrGeneral);
			break;
		}

	Next();
	}


void TBluetoothAttributeParser::CompareRFCOMM( CSdpAttrValue& aAttrValue )
	{
	TBool success = EFalse;

	if ( aAttrValue.Type() == ETypeUUID )
		{
		if ( aAttrValue.UUID() == KRFCOMM )
			{
			success = ETrue;
			}
		}

	if (!success)
		iContinueSearching = EFalse;
	}

// Epistrefei thn Port
void TBluetoothAttributeParser::GetPort( CSdpAttrValue& aAttrValue )
	{
	TBool success = EFalse;

	if ( aAttrValue.Type() == ETypeUint )
		{
		iPort = aAttrValue.Uint();
		iObserver.SetPort(iPort);
		success = ETrue;
		}

	if (!success)
		iContinueSearching = EFalse;
	}

void TBluetoothAttributeParser::Next()
	{
    __ASSERT_DEBUG(iProcessingState != EFinished, Panic(EBadAttributeValue));

	iProcessingState = static_cast<EProcessingState>( static_cast<TInt>(iProcessingState) + 1 );
	}

// End of File
